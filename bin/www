#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pugpractice:server');
var http = require('http');
var pieces = require('../public/javascripts/pieces.js')
var _ = require('lodash');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
  
//globals
var userNickNames = {};
var typingUsers = [];
var lobbyGameList = {}
var gameList = {}

io.on('connection', function(socket)
{
  io.emit('chat message', "A new user connected");
  io.emit('online users update', userNickNames)

  for (host in lobbyGameList)
  {
    if (lobbyGameList.hasOwnProperty(host))
    {
      game = lobbyGameList[host]
      io.to(socket.id).emit('game made', game)
    }
  }

  socket.on('new socket connected to game', function(name)
  {
    for (host in gameList)
    {
      if (gameList.hasOwnProperty(host) && (gameList[host].redPlayer.Name == name))
      {
        gameList[host].redPlayer.socketID = socket.id
        socket.join(host)
        io.to(socket.id).emit('new game data', gameList[host])
      }
      else if (gameList.hasOwnProperty(host) && (gameList[host].bluePlayer.Name == name))
      {
        gameList[host].bluePlayer.socketID = socket.id
        socket.join(host)
        io.to(socket.id).emit('new game data', gameList[host])
      }
    }
  })

  socket.on('request tiles which can be built on', function(inventoryPosition)
  {
    var game = findGameFromSocketID(socket.id)

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    gamePiece = player.inventory[inventoryPosition]

    var buildableTiles = gamePiece.getTilesWhichCanBeBuiltOn(game)
    io.to(socket.id).emit('new active tiles', buildableTiles) 

  })

  socket.on('request tiles which can be moved to', function(tile)
  {
    var game = findGameFromSocketID(socket.id)
    var gameTile = game.board[tile.col][tile.row]
    var gamePiece = gameTile.piece

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    if (!findIfAPlayerOwnsAPiece(isRedPlayer, gameTile.piece))
    {
      io.to(socket.id).emit("new log message", "You don't own that piece!")
      return        
    }


    var moveableTiles = gamePiece.getTilesWhichCanBeMovedTo(game, gameTile)
    io.to(socket.id).emit('new active tiles', moveableTiles) 

  })

  socket.on('request to end turn', function()
  {
    var game = findGameFromSocketID(socket.id)

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    game.isRedPlayersTurn = !game.isRedPlayersTurn  

    io.to(game.Host).emit('player ended their turn')     
  })

 socket.on('request to attack a piece', function(attacker, tile, isAttackingFlatPiece)
  {
    var game = findGameFromSocketID(socket.id)
    var tileBeingAttacked = game.board[tile.col][tile.row]

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    if (!findIfAPlayerOwnsAPiece(isRedPlayer, attacker))
    {
      io.to(socket.id).emit("new log message", "You don't own that piece!")
      return        
    }

    //TODO: check if attack is in range

    if (isAttackingFlatPiece)
      var attackee = tileBeingAttacked.flatPiece
    else
      var attackee = tileBeingAttacked.piece

    attackee.health -= attacker.power
  
    if (attackee.health <= 0)
    {
      if (isAttackingFlatPiece)
        tileBeingAttacked.flatPiece = null
      else
        tileBeingAttacked.piece = null
    }

    io.to(game.Host).emit('player attacked a piece', attacker, tileBeingAttacked, isAttackingFlatPiece)     
  })

  socket.on('request to energize', function(energizeT)
  {
    var game = findGameFromSocketID(socket.id)

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer
    var energizeTile = game.board[energizeT.col][energizeT.row]

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    if (!findIfAPlayerOwnsAPiece(isRedPlayer, energizeTile.piece))
    {
      io.to(socket.id).emit("new log message", "You don't own that piece!")
      return        
    }


    if (energizeTile.piece.energy >= energizeTile.piece.energyCapacity)
    {
      io.to(socket.id).emit("new log message", "Already at maxmimum energy")
      return       
    }

    if (player.energy <= 0)
    {
      io.to(socket.id).emit("new log message", "No energy to spend")
      return             
    }

    energizeTile.piece.energy ++
    player.energy --

    io.to(game.Host).emit('player energized a piece', isRedPlayer, energizeTile, player.energy)     
  })

  socket.on('request to move a piece', function(fTile, tTile)
  {
    var game = findGameFromSocketID(socket.id)

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    if (!findIfAPlayerOwnsAPiece(isRedPlayer, fTile.piece))
    {
      io.to(socket.id).emit("new log message", "You don't own that piece!")
      return        
    }

    var fromTile = game.board[fTile.col][fTile.row]
    var toTile = game.board[tTile.col][tTile.row]

    var moveableTiles = getMoveableTilesFromTileForPieceOnTile(fromTile, game.board)

    if (!moveableTiles.includes(toTile))
    {
      io.to(socket.id).emit("new log message", "Piece can't move there")
      return  
    }

    toTile.piece = fromTile.piece
    fromTile.piece = null

    var distanceMoved = getDistanceBetweenTwoTiles(fromTile, toTile)
    toTile.piece.movement -= distanceMoved 

    io.to(game.Host).emit('player moved a piece', fromTile, toTile)     
  })

  socket.on('request piece purchase', function(clientPiece)
  {
    var game = findGameFromSocketID(socket.id)

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    console.log(clientPiece)
    console.log(game.units)

    var piece = game.units[clientPiece.name]

    if (piece == null)
    {
      io.to(socket.id).emit("new log message", "Piece not in game")
      return      
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    if (player.gold < piece.cost)
    {
      io.to(socket.id).emit("new log message", "Not enough money")
      return
    }

    if (!player.inventory.includes(undefined))
    {
      io.to(socket.id).emit("new log message", "No room in inventory")
      return
    }

    player.gold = player.gold - piece.cost
    for (var i = 0; i < player.inventory.length; i++) 
    {
        if (player.inventory[i] == null)
        {
          var newPiece = _.cloneDeep(piece);
          player.inventory[i] = newPiece
          if (isRedPlayer)
            newPiece.owner = "Red"
          else
            newPiece.owner = "Blue"
          break
        }
    }

    io.to(game.Host).emit('player bought a piece', isRedPlayer, player.inventory, player.gold) 
  })

  socket.on('request to build a piece', function(inventoryPosition, tile)
  {
    var game = findGameFromSocketID(socket.id)

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    tileToBuildOn = game.board[tile.col][tile.row]
    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    var tilesWhichCanBuiltOn = populateTilesWhichCanCurrentlyBeBuiltOn(player.inventory[inventoryPosition], game.board, isRedPlayer)

    if(!tilesWhichCanBuiltOn.includes(tileToBuildOn))
    {
      io.to(socket.id).emit("new log message", "Can't build there")
      return        
    }

    tileToBuildOn.piece = player.inventory[inventoryPosition]
    player.inventory[inventoryPosition] = null

    io.to(game.Host).emit('player built a piece', isRedPlayer, player.inventory, tileToBuildOn)
  })


  //lobby functions
  socket.on('user trying to join game in lobby', function(host)
  {
    name = userNickNames[socket.id]
    if (name == undefined) 
    {
      io.to(socket.id).emit('chat message', 'Set nickname to join a game');
    }

    else if (name == host) 
    {
      io.to(socket.id).emit('chat message', 'Can\'t join your own game');
    }

    //make new game and start it
    else
    {
      var board = new Array(9);
      var allTiles = []
      var redFriendlyTiles = []
      var blueFriendlyTiles = []
      for (var col = 0; col < board.length; col++)
      {
        board[col] = new Array(9);
        for (var row=0; row < board[col].length; row++) 
        {
          var tile = {piece: null, flatPiece: null, statuses: "Empty", DOMObject: null, row: row, col: col}
          board[col][row] = tile

          allTiles.push(tile)
          if (row < 3)
            redFriendlyTiles.push(tile)
          else if (row > 5)
            blueFriendlyTiles.push(tile)
        }
      }

      //add to pieces.js
      var moneyPlatform = {name: "Money Platform", types: ["Platform"],  platformType: "Money", owner: null, boardAvatar: "MP", isFlat: true}
      var victoryPointPlatform = {name: "Victory Platform", types: ["Platform"], platformType: "Victory", owner: null, boardAvatar: "VP", isFlat: true}
      var energyPlatform = {name: "Energy Platform", types: ["Platform"], platformType: "Energy", owner: null, boardAvatar: "EP", isFlat: true}

      //set platforms
      board[1][3].flatPiece = moneyPlatform
      board[7][3].flatPiece = energyPlatform
      board[1][5].flatPiece = moneyPlatform
      board[7][5].flatPiece = energyPlatform
      board[4][4].flatPiece = victoryPointPlatform

      var newGame = 
      {
        Host: host,
        redPlayer: {socketID: null, Name: name, gold: 20, score: 0, energy: 2, inventory: Array(5)},
        bluePlayer: {socketID: null, Name: host, gold: 20, score: 0, energy: 2, inventory: Array(5)},
        board: board,
        allTiles: allTiles,
        redFriendlyTiles: redFriendlyTiles,
        blueFriendlyTiles: blueFriendlyTiles,
        buildings: pieces.buildings,
        units: pieces.units,
        isRedPlayersTurn: true
      }
      gameList[host] = newGame
      socket.join(host)      
      io.to(host).emit('trigger redirect for new game', host)
    }
  })

  socket.on('make game in lobby', function(){
    name = userNickNames[socket.id]
    if (name == undefined)
    {
      io.to(socket.id).emit('chat message', 'Set nickname to make a game');
    }
    else if (name in lobbyGameList)
    {
      io.to(socket.id).emit('chat message', 'You already have a game');
    }
    else
    {
      var game = {Host: name, redPlayer: name, bluePlayer: null}
      lobbyGameList[name] = game
      socket.join(game.Host)
      io.emit("game made", game)
    }
  })

  //chat funcitons
  socket.on('chat message', function(msg){
    if (userNickNames[socket.id]) {
      io.emit('chat message', userNickNames[socket.id] + ": " + msg);
    }
    else {
      io.to(socket.id).emit('set nickname to start chatting');
    }
  })

  socket.on('private message', function(data){
    recipient = data.recip
    message = data.msg
    socketID = userNickNames.getKeyByValue(recipient)
    if(socketID){
      appendedMessage = "Private message to you from " + userNickNames[socket.id] + ": " + message
      io.to(socketID).emit('chat message', appendedMessage);
    }
    else{
      io.to(socket.id).emit('chat message', 'No such user');
    }
  })

  socket.on('disconnect', function(){
    if(userNickNames[socket.id]){
      if(typingUsers.includes(userNickNames[socket.id])){
        index = typingUsers.indexOf(name);
        typingUsers.splice(index, 1);
        io.emit('user stopped typing', typingUsers)
      }
    }
    io.emit('chat message', "A user disconnected");
    io.emit('online users update', userNickNames)
  })

  socket.on('new nickname', function(newNickName){
    userNickNames[socket.id] = newNickName;
    io.emit('online users update', userNickNames)
  })

  socket.on('user is typing', function(){
    name = userNickNames[socket.id];
    if(name){
      if(!typingUsers.includes(name)){
        typingUsers.push(name)
        io.emit('user is typing', typingUsers)
      }
    }
  })

  socket.on('user stopped typing', function(){
    name = userNickNames[socket.id];
    if(typingUsers.includes(name)){
        index = typingUsers.indexOf(name);
        typingUsers.splice(index, 1);
        io.emit('user stopped typing', typingUsers)
      }
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

Object.prototype.getKeyByValue = function( value ) {
    for(var prop in this){
      if(this.hasOwnProperty(prop)){
          if(this[prop] === value)
            return prop;
        }
    }
    return false
}

function findIfItsAPlayersTurnInGame(isRedPlayer, game){
  return (game.isRedPlayersTurn && isRedPlayer) || (!game.isRedPlayersTurn && !isRedPlayer)
}

function findIfAPlayerOwnsAPiece(isRedPlayer, piece){
  return (piece.owner == 'Red' && isRedPlayer) || (piece.owner == 'Blue' && !isRedPlayer)
}

function findGameFromSocketID(socketID)
{
  for (host in gameList)
    if (gameList.hasOwnProperty(host) && (gameList[host].redPlayer.socketID == socketID || gameList[host].bluePlayer.socketID == socketID))
      return gameList[host]
  return null
}

function findIfPlayerIsRedPlayerInGameFromSocketID(game, socketID)
{
  if (game.redPlayer.socketID == socketID)
    return true
  else
    return false
}

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function getKeyByValue(object, value) {
  return Object.keys(object).find(key => object[key] === value);
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function readCookie(name) {
    var nameEQ = encodeURIComponent(name) + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ')
            c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0)
            return decodeURIComponent(c.substring(nameEQ.length, c.length));
    }
    return null;
}

function getAdjacentTiles(tile, board)
{
  adjacentTiles = []
  if (tile.row - 1 >= 0)
    adjacentTiles.push(board[tile.col][tile.row-1])
  if (tile.row + 1 < 9)
    adjacentTiles.push(board[tile.col][tile.row+1])
  if (tile.col - 1 >= 0)
    adjacentTiles.push(board[tile.col-1][tile.row])
  if (tile.col + 1 < 9)
    adjacentTiles.push(board[tile.col+1][tile.row])
  return adjacentTiles
}

function getMoveableTilesFromTileForPieceOnTile(tile, board)
{
  var tilesWhichCanCurrentlyBeMovedTo = []
  addMoveableTilesFromTileForPieceOnTileHelper(tile, tile.piece.movement, tilesWhichCanCurrentlyBeMovedTo, board)
  return tilesWhichCanCurrentlyBeMovedTo.filter(onlyUnique)
}

function onlyUnique(value, index, self) { 
    return self.indexOf(value) === index;
}

function addMoveableTilesFromTileForPieceOnTileHelper(tile, movementLeft, tilesWhichCanCurrentlyBeMovedTo, board)
{
  if (movementLeft == 0)
    return

  adjacentTiles = getAdjacentTiles(tile, board)
  for (adjacentTile of adjacentTiles)
  {
    if (tileCanBeMovedOnTo(adjacentTile))
    {
      tilesWhichCanCurrentlyBeMovedTo.push(adjacentTile)
      addMoveableTilesFromTileForPieceOnTileHelper(adjacentTile, movementLeft-1, tilesWhichCanCurrentlyBeMovedTo, board)
    }
  }
}

function tileCanBeMovedOnTo(tile)
{
  return (tile.piece == null)
}

function populateTilesWhichCanCurrentlyBeBuiltOn(piece, board, isRedPlayer)
{
  var tilesWhichCanCurrentlyBeBuiltOn = []
  for (var col = 0; col < 9; col++)
  {
    if(piece.buildableZones.includes("Friendly"))
    {
      if (isRedPlayer)
      {
        addBuildableTilesFromRowStartToRowEnd(0, 3, col, board, tilesWhichCanCurrentlyBeBuiltOn)
      }
      else
      {
        addBuildableTilesFromRowStartToRowEnd(6, 9, col, board, tilesWhichCanCurrentlyBeBuiltOn)
      }   
    }

    if(piece.buildableZones.includes("Neutral"))
    {
      addBuildableTilesFromRowStartToRowEnd(3, 6, col, board, tilesWhichCanCurrentlyBeBuiltOn)
    }

    if(piece.buildableZones.includes("Enemy"))
    {
      if (!isRedPlayer)
      {
        addBuildableTilesFromRowStartToRowEnd(0, 3, col, board, tilesWhichCanCurrentlyBeBuiltOn)
      }
      else
      {
        addBuildableTilesFromRowStartToRowEnd(6, 9, col, board, tilesWhichCanCurrentlyBeBuiltOn)
      }   
    }
  }
  return tilesWhichCanCurrentlyBeBuiltOn
}

function addBuildableTilesFromRowStartToRowEnd(rowStart, rowEnd, col, board, tilesWhichCanCurrentlyBeBuiltOn)
{
  while (rowStart < rowEnd)
  {
    var tile = board[col][rowStart]
    if (tile.piece == null && tile.flatPiece == null)
    {
      tilesWhichCanCurrentlyBeBuiltOn.push(tile)
    }
    rowStart += 1
  }
}

function getDistanceBetweenTwoTiles(tile1, tile2)
{
  return Math.abs(tile1.col - tile2.col) + Math.abs(tile1.row-tile2.row)
}