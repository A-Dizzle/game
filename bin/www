#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pugpractice:server');
var http = require('http');
var pieces = require('../public/javascripts/pieces.js')
var _ = require('lodash');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
  
//globals
var userNickNames = {};
var typingUsers = [];
var lobbyGameList = {}
var gameList = {}


const boardLength = 15;
const boardWidth = 9;
const startOfRedTiles = 0
const endOfRedTiles = 3
const startOfBlueTiles = 12
const endOfBlueTiles = 15

io.on('connection', function(socket)
{
  io.emit('chat message', "A new user connected");
  io.emit('online users update', userNickNames)

  for (host in lobbyGameList)
  {
    if (lobbyGameList.hasOwnProperty(host))
    {
      game = lobbyGameList[host]
      io.to(socket.id).emit('game made', game)
    }
  }

  socket.on('request to end action phase', function(tile)
  {
    var game = findGameFromSocketID(socket.id)
    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    if (game.phase != "Action")
    {
      io.to(socket.id).emit("new log message", "Wrong phase")
      return      
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    game.phase = "Energize"

    io.to(game.host).emit('new game state', convertServerGameToClientGame(game)) 
  })

  socket.on('new socket connected to game', function(name)
  {
    for (host in gameList)
    {
      if (gameList.hasOwnProperty(host) && (gameList[host].redPlayer.Name == name))
      {
        gameList[host].redPlayer.socketID = socket.id
        socket.join(host)
        io.to(socket.id).emit('new game data', convertServerGameToClientGame(gameList[host]))
      }
      else if (gameList.hasOwnProperty(host) && (gameList[host].bluePlayer.Name == name))
      {
        gameList[host].bluePlayer.socketID = socket.id
        socket.join(host)
        io.to(socket.id).emit('new game data', convertServerGameToClientGame(gameList[host]))
      }
    }
  })

  socket.on('request to cast a spell', function(inventoryPosition, tile, targetID)
  {
    var game = findGameFromSocketID(socket.id)

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    if (game.phase != "Action")
    {
      io.to(socket.id).emit("new log message", "Wrong phase")
      return      
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer
    var spell = player.inventory[inventoryPosition]

    if (targetID == "Tile")
      var target = game.board[tile.col][tile.row]
    else if(targetID == "Flat Piece")
      var target = game.board[tile.col][tile.row].flatPiece
    else if(targetID == "Piece")
      var target = game.board[tile.col][tile.row].piece

    if (spell == null)
    {
      io.to(socket.id).emit("new log message", "No spell to cast")
      return      
    }  

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    var tilesWhichCanBeCastOn = spell.getTilesWhichCanBeCastOn(game)

    if(!tilesWhichCanBeCastOn.includes(game.board[tile.col][tile.row]))
    {
      io.to(socket.id).emit("new log message", "Can't cast there")
      return        
    }

    spell.cast(game, target)
    player.inventory[inventoryPosition] = null

    io.to(game.host).emit('new game state', convertServerGameToClientGame(game))
  })

  socket.on('request tiles which can be cast on', function(inventoryPosition)
  {
    var game = findGameFromSocketID(socket.id)

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    if (game.phase != "Action")
    {
      io.to(socket.id).emit("new log message", "Wrong phase")
      return      
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    spell = player.inventory[inventoryPosition]

    var castableTiles = spell.getTilesWhichCanBeCastOn(game)
    io.to(socket.id).emit('new active tiles', castableTiles) 
  })

  socket.on('request tiles which can be attacked', function(tile)
  {
    var game = findGameFromSocketID(socket.id)
    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    if (game.phase != "Action")
    {
      io.to(socket.id).emit("new log message", "Wrong phase")
      return      
    }

    var gameTile = game.board[tile.col][tile.row]
    var gamePiece = gameTile.piece
    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    if (!findIfAPlayerOwnsAPiece(isRedPlayer, gameTile.piece))
    {
      io.to(socket.id).emit("new log message", "You don't own that piece!")
      return        
    }

    var attackableTiles = gamePiece.getAttackableTiles(game, gameTile)
    io.to(socket.id).emit('new active tiles', attackableTiles) 
  })


 socket.on('request to attack a piece', function(attackerTile, victimTile, isAttackingFlatPiece)
  {
    var game = findGameFromSocketID(socket.id)

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    if (game.phase != "Action")
    {
      io.to(socket.id).emit("new log message", "Wrong phase")
      return      
    }

    var gameVictimTile = game.board[victimTile.col][victimTile.row]
    var gameAttackerTile = game.board[attackerTile.col][attackerTile.row]
    var victimPiece = isAttackingFlatPiece ? gameVictimTile.flatPiece : gameVictimTile.piece 
    var attackerPiece = gameAttackerTile.piece

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    if (!findIfAPlayerOwnsAPiece(isRedPlayer, attackerPiece))
    {
      io.to(socket.id).emit("new log message", "You don't own that piece!")
      return        
    }

    var attackableTiles = attackerPiece.getAttackableTiles(game, gameAttackerTile)

    if (!attackableTiles.includes(gameVictimTile))
    {
      io.to(socket.id).emit("new log message", "Attack out of range")
      return              
    }

    attackerPiece.attack(game, victimPiece)

    if (attackerPiece.health <= 0)
      attackerPiece.die(game, gameAttackerTile, victimPiece)
    if (victimPiece.health <= 0)
      victimPiece.die(game, gameVictimTile, attackerPiece)

    io.to(game.host).emit('new game state', convertServerGameToClientGame(game))
  })

  socket.on('request tiles which can be built on', function(inventoryPosition)
  {
    var game = findGameFromSocketID(socket.id)

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    if (game.phase != "Action")
    {
      io.to(socket.id).emit("new log message", "Wrong phase")
      return      
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    gamePiece = player.inventory[inventoryPosition]

    var buildableTiles = gamePiece.getTilesWhichCanBeBuiltOn(game)
    io.to(socket.id).emit('new active tiles', buildableTiles) 
  })

  socket.on('request to build a piece', function(inventoryPosition, tile)
  {
    var game = findGameFromSocketID(socket.id)

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    if (game.phase != "Action")
    {
      io.to(socket.id).emit("new log message", "Wrong phase")
      return      
    }

    tileToBuildOn = game.board[tile.col][tile.row]
    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer
    var piece = player.inventory[inventoryPosition]

    if (piece == null)
    {
      io.to(socket.id).emit("new log message", "No piece to build")
      return      
    }  

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    var tilesWhichCanBeBuiltOn = piece.getTilesWhichCanBeBuiltOn(game)

    if(!tilesWhichCanBeBuiltOn.includes(tileToBuildOn))
    {
      io.to(socket.id).emit("new log message", "Can't build there")
      return        
    }

    if (piece.isFlat)
      tileToBuildOn.flatPiece = piece      
    else
      tileToBuildOn.piece = piece

    if ("addReactionsWhenBuilt" in piece)
      piece.addReactionsWhenBuilt(game, tileToBuildOn)

    //run piece on build effects

    player.inventory[inventoryPosition] = null

    io.to(game.host).emit('new game state', convertServerGameToClientGame(game))
  })

  socket.on('request tiles which can be moved to and the paths there', function(tile)
  {
    var game = findGameFromSocketID(socket.id)
    var gameTile = game.board[tile.col][tile.row]
    var gamePiece = gameTile.piece

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    if (game.phase != "Action")
    {
      io.to(socket.id).emit("new log message", "Wrong phase")
      return      
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    if (!findIfAPlayerOwnsAPiece(isRedPlayer, gameTile.piece))
    {
      io.to(socket.id).emit("new log message", "You don't own that piece!")
      return        
    }

    var tilesThatCanBeMovedToAndThePathThere = gamePiece.getTilesWhichCanBeMovedToAndThePathThere(game, gameTile)
    var listOfTilesAndPathsForClient = []

    for (tile of tilesThatCanBeMovedToAndThePathThere.keys())
    {
      var newTileAndPathList = []
      newTileAndPathList.push(tile)

      for (pathTile of tilesThatCanBeMovedToAndThePathThere.get(tile))
        newTileAndPathList.push(pathTile)

      listOfTilesAndPathsForClient.push(newTileAndPathList)
    }

    io.to(socket.id).emit('new tiles that can be moved to and the paths there', listOfTilesAndPathsForClient) 
  })

  socket.on('request to move a piece', function(fTile, tTile)
  {
    var game = findGameFromSocketID(socket.id)

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    if (game.phase != "Action")
    {
      io.to(socket.id).emit("new log message", "Wrong phase")
      return      
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    if (!findIfAPlayerOwnsAPiece(isRedPlayer, fTile.piece))
    {
      io.to(socket.id).emit("new log message", "You don't own that piece!")
      return        
    }

    var fromTile = game.board[fTile.col][fTile.row]
    var toTile = game.board[tTile.col][tTile.row]
    var movingPiece = fromTile.piece

    if (getDistanceBetweenTwoTiles(fromTile, toTile) > movingPiece.movement)
    {
      io.to(socket.id).emit("new log message", "Not enough movement")
      return
    }

    var moveableTilesAndThePathThere = movingPiece.getTilesWhichCanBeMovedToAndThePathThere(game, fromTile)

    if (!moveableTilesAndThePathThere.has(toTile))
    {
      io.to(socket.id).emit("new log message", "Piece can't move there")
      return  
    }

    movingPiece.move(game, fromTile, moveableTilesAndThePathThere.get(toTile))
    io.to(game.host).emit('new game state', convertServerGameToClientGame(game))   
  })

  socket.on('request to energize', function(energizeT)
  {
    var game = findGameFromSocketID(socket.id)

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    if (game.phase != "Energize")
    {
      io.to(socket.id).emit("new log message", "Wrong phase")
      return      
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer
    var energizeTile = game.board[energizeT.col][energizeT.row]

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    if (!findIfAPlayerOwnsAPiece(isRedPlayer, energizeTile.piece))
    {
      io.to(socket.id).emit("new log message", "You don't own that piece!")
      return        
    }


    if (energizeTile.piece.energy >= energizeTile.piece.energyCapacity)
    {
      io.to(socket.id).emit("new log message", "Already at maxmimum energy")
      return       
    }

    if (player.activeEnergy >= player.energyCapacity)
    {
      io.to(socket.id).emit("new log message", "No free energy")
      return             
    }

    energizeTile.piece.increaseEnergy()
    player.activeEnergy ++

    io.to(game.host).emit('new game state', convertServerGameToClientGame(game))     
  })

  socket.on('request piece purchase', function(clientPiece)
  {

    var game = findGameFromSocketID(socket.id)

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    if (game.phase != "Action")
    {
      io.to(socket.id).emit("new log message", "Wrong phase")
      return      
    }

    if (clientPiece.types.includes("Unit"))
      var piece = game.units[clientPiece.name]
    else if (clientPiece.types.includes("Building"))
      var piece = game.buildings[clientPiece.name]
    else if (clientPiece.types.includes("Spell"))
      var piece = game.spells[clientPiece.name]
    if (piece == null)
    {
      io.to(socket.id).emit("new log message", "Piece not in game")
      return
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var player = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    if (!findIfItsAPlayersTurnInGame(isRedPlayer, game))
    {
      io.to(socket.id).emit("new log message", "Not your turn")
      return  
    }

    if (player.gold < piece.cost)
    {
      io.to(socket.id).emit("new log message", "Not enough money")
      return
    }

    if (!player.inventory.includes(undefined))
    {
      io.to(socket.id).emit("new log message", "No room in inventory")
      return
    }

    player.gold = player.gold - piece.cost
    for (var i = 0; i < player.inventory.length; i++) 
    {
        if (player.inventory[i] == null)
        {
          var newPiece = _.cloneDeep(piece);
          player.inventory[i] = newPiece
          if (isRedPlayer)
            newPiece.owner = "Red"
          else
            newPiece.owner = "Blue"
          break
        }
    }

    io.to(game.host).emit('new game state', convertServerGameToClientGame(game))
  })

  socket.on('request to end turn', function()
  {
    var game = findGameFromSocketID(socket.id)

    if (game == null)
    {
      io.to(socket.id).emit("new log message", "No such game")
      return
    }

    if (game.phase != "Energize")
    {
      io.to(socket.id).emit("new log message", "Wrong phase")
      return      
    }

    var isRedPlayer = findIfPlayerIsRedPlayerInGameFromSocketID(game, socket.id)
    var activePlayer = (isRedPlayer) ? game.redPlayer : game.bluePlayer

    //collection
    activePlayer.goldProduction = countGoldProductionForPlayer(game, isRedPlayer)
    activePlayer.gold += activePlayer.goldProduction
    activePlayer.energyCapacity = countEnergyCapacityProductionForPlayer(game, isRedPlayer)
    activePlayer.victoryPointTokenProduction = countVictoryPointTokenProductionForPlayer(game, isRedPlayer)
    restoreMovementForPlayersPieces(game, isRedPlayer)

    if (game.victoryPointTokenSupply < activePlayer.victoryPointTokenProduction)
    {
      activePlayer.victoryPoints += game.victoryPointTokenSupply
      game.victoryPointTokenSupply = 0
    }
    else
    {
      activePlayer.victoryPoints += activePlayer.victoryPointTokenProduction
      game.victoryPointTokenSupply -= activePlayer.victoryPointTokenProduction
    }

    if (game.victoryPointTokenSupply == 0 || allVPTokenTilesAreOccupied(game))
    {
      io.to(game.host).emit("new log message", "Game over")      
      
      if (game.redPlayer.victoryPoints > game.bluePlayer.victoryPoints)
        io.to(game.host).emit("new log message", "Red Player Wins")
      else if (game.bluePlayer.victoryPoints > game.redPlayer.victoryPoints || isRedPlayer)
        io.to(game.host).emit("new log message", "Blue Player Wins")
      else
        io.to(game.host).emit("new log message", "It's a tie")

      //gameList[host] = null
      return
    }

    //switch players turn
    game.isRedPlayersTurn = !game.isRedPlayersTurn
    game.phase = "Action"
    io.to(game.host).emit('new game state', convertServerGameToClientGame(game)) 
  })

  function restoreMovementForPlayersPieces(game, isRedPlayer)
  {
    for (tile of game.getAllTilesInListForm())
    {
      if(tile.piece != null && findIfAPlayerOwnsAPiece(isRedPlayer, tile.piece) && tile.piece.movementCapacity != 0)
        tile.piece.movement = tile.piece.movementCapacity
    }  
  }

  function updatePlatformOwnership(game)
  {
    for (platformTile of game.getVPTokenTiles)
      if (platformTile.piece != null)
        platformTile.flatPiece.owner = platformTile.piece.owner 
  }

  function allVPTokenTilesAreOccupied(game)
  {
    for (tile of game.getVPTokenTiles())
      if (tile.flatPiece == null && tile.piece == null)
        return false
    return true
  }

  function countGoldProductionForPlayer(game, isRedPlayer)
  {
    var totalGoldProduction = 0
    for (tile of game.getAllTilesInListForm())
    {
      if(tile.piece != null && findIfAPlayerOwnsAPiece(isRedPlayer, tile.piece) && tile.piece.goldProduction != null)
        totalGoldProduction += tile.piece.goldProduction
      if(tile.flatPiece != null && findIfAPlayerOwnsAPiece(isRedPlayer, tile.flatPiece) && tile.flatPiece.goldProduction != null)
        totalGoldProduction += tile.flatPiece.goldProduction
    }
    return totalGoldProduction
  }

  function countVictoryPointTokenProductionForPlayer(game, isRedPlayer)
  {
    var totalVictoryPointTokenProduction = 0
    for (tile of game.getAllTilesInListForm())
    {
      var potentialVPTokensFromTile = findHowManyVPTokensTileProduces(tile)
      if(tile.piece != null && potentialVPTokensFromTile != 0 && findIfAPlayerOwnsAPiece(isRedPlayer, tile.piece) && tile.piece.victoryPointTokenProduction != null)
        totalVictoryPointTokenProduction += tile.piece.victoryPointTokenProduction*potentialVPTokensFromTile
      if(tile.flatPiece != null && potentialVPTokensFromTile != 0 && findIfAPlayerOwnsAPiece(isRedPlayer, tile.flatPiece) && tile.flatPiece.victoryPointTokenProduction != null)
        totalVictoryPointTokenProduction += tile.flatPiece.victoryPointTokenProduction*potentialVPTokensFromTile
    }
    return totalVictoryPointTokenProduction    
  }

  function countEnergyCapacityProductionForPlayer(game, isRedPlayer)
  {
    var totalEnergyCapacityProduction = 0
    for (tile of game.getAllTilesInListForm())
    {
      if(tile.piece != null && findIfAPlayerOwnsAPiece(isRedPlayer, tile.piece) && tile.piece.energyCapacityProduction != null)
        totalEnergyCapacityProduction += tile.piece.energyCapacityProduction
      if(tile.flatPiece != null && findIfAPlayerOwnsAPiece(isRedPlayer, tile.flatPiece) && tile.flatPiece.energyCapacityProduction != null)
        totalEnergyCapacityProduction += tile.flatPiece.energyCapacityProduction
    }
    return totalEnergyCapacityProduction    
  }

  function findHowManyVPTokensTileProduces(tile)
  {
    if (tile.statuses.includes("VP1"))
      return 1
    else if (tile.statuses.includes("VP2"))
      return 2
    else if (tile.statuses.includes("VP3"))
      return 3
    else 
      return 0
  }

  //////////////////////////////////////////
  //lobby functions
  socket.on('user trying to join game in lobby', function(host)
  {
    name = userNickNames[socket.id]
    if (name == undefined) 
    {
      io.to(socket.id).emit('chat message', 'Set nickname to join a game');
    }

    else if (name == host) 
    {
      io.to(socket.id).emit('chat message', 'Can\'t join your own game');
    }

    //make new game and start it
    else
    {
      var board = new Array(boardWidth);
      for (var col = 0; col < boardWidth; col++)
      {
        board[col] = new Array(boardLength);
        for (var row = 0; row < boardLength; row++) 
        {
          var tile = {piece: null, flatPiece: null, statuses: [""], row: row, col: col}
          board[col][row] = tile
        }
      }

      //set vp token squares
      board[2][5].statuses.push("VP1")
      board[4][5].statuses.push("VP1")
      board[6][5].statuses.push("VP1")
      board[2][7].statuses.push("VP2")
      board[4][7].statuses.push("VP3")
      board[6][7].statuses.push("VP2")
      board[2][9].statuses.push("VP1")
      board[4][9].statuses.push("VP1")
      board[6][9].statuses.push("VP1")         

      //set starting buildings
      for (var col = 2; col < 7; col++)
      {
        board[col][12].piece = _.cloneDeep(pieces.buildings['Small Gold Farm'])
        board[col][12].piece.owner = "Blue"
        board[col][2].piece = new _.cloneDeep(pieces.buildings['Small Gold Farm'])
        board[col][2].piece.owner = "Red"
      }

      for (var col = 3; col < 6; col++)
      {
          board[col][14].piece = new _.cloneDeep(pieces.buildings['Small Energy Farm'])
          board[col][14].piece.owner = "Blue"
          board[col][0].piece = new _.cloneDeep(pieces.buildings['Small Energy Farm'])
          board[col][0].piece.owner = "Red"
      }

      var newGame =   
      {
        host: host,
        redPlayer: {socketID: null, turnsTaken: 0, Name: name, goldProduction: 0, gold: 99, victoryPointTokenProduction: 0, victoryPoints: 0, activeEnergy: 0, energyCapacity: 3, inventory: Array(5)},
        bluePlayer: {socketID: null, turnsTaken: 0, Name: host, goldProduction: 0, gold: 99, victoryPointTokenProduction: 0, victoryPoints: 0, activeEnergy: 0, energyCapacity: 3, inventory: Array(5)},
        board: board,
        reactions: new Map,
        buildings: pieces.buildings,
        units: pieces.units,
        spells: pieces.spells,
        victoryPointTokenSupply: 100,
        phase: "Action",
        isRedPlayersTurn: true,

        getRedFriendlyTiles: function()
        {
          var redTiles = []
          for (var col = 0; col < boardWidth; col++)
            for (var row = startOfRedTiles; row < endOfRedTiles; row++) 
              redTiles.push(board[col][row])
          return redTiles
        },

        getVPTokenTiles: function()
        {
          var platformTiles = []
          platformTiles.push(board[2][5])
          platformTiles.push(board[4][5])
          platformTiles.push(board[6][5])
          platformTiles.push(board[2][7])
          platformTiles.push(board[4][7])
          platformTiles.push(board[6][7])
          platformTiles.push(board[2][9])
          platformTiles.push(board[4][9])
          platformTiles.push(board[6][9])          
          return platformTiles     
        },

        getBlueFriendlyTiles: function()
        {
          var blueTiles = []
          for (var col = 0; col < board.length; col++)
            for (var row = startOfBlueTiles; row < endOfBlueTiles; row++) 
              blueTiles.push(board[col][row])
          return blueTiles
        },

        getAllTilesInListForm: function()
        {
          var allTiles = []
          for (var col = 0; col < boardWidth; col++)
            allTiles = allTiles.concat(board[col])
          return allTiles
        }
      }

      gameList[host] = newGame
      socket.join(host)      
      io.to(host).emit('trigger redirect for new game', host)
    }
  })

  socket.on('make game in lobby', function(){
    name = userNickNames[socket.id]
    if (name == undefined)
    {
      io.to(socket.id).emit('chat message', 'Set nickname to make a game');
    }
    else if (name in lobbyGameList)
    {
      io.to(socket.id).emit('chat message', 'You already have a game');
    }
    else
    {
      var game = {host: name, redPlayer: name, bluePlayer: null}
      lobbyGameList[name] = game
      socket.join(game.host)
      io.emit("game made", game)
    }
  })

  //chat funcitons
  socket.on('chat message', function(msg){
    if (userNickNames[socket.id]) {
      io.emit('chat message', userNickNames[socket.id] + ": " + msg);
    }
    else {
      io.to(socket.id).emit('set nickname to start chatting');
    }
  })

  socket.on('private message', function(data){
    recipient = data.recip
    message = data.msg
    socketID = userNickNames.getKeyByValue(recipient)
    if(socketID){
      appendedMessage = "Private message to you from " + userNickNames[socket.id] + ": " + message
      io.to(socketID).emit('chat message', appendedMessage);
    }
    else{
      io.to(socket.id).emit('chat message', 'No such user');
    }
  })

  socket.on('disconnect', function(){
    if(userNickNames[socket.id]){
      if(typingUsers.includes(userNickNames[socket.id])){
        index = typingUsers.indexOf(name);
        typingUsers.splice(index, 1);
        io.emit('user stopped typing', typingUsers)
      }
    }
    io.emit('chat message', "A user disconnected");
    io.emit('online users update', userNickNames)
  })

  socket.on('new nickname', function(newNickName){
    userNickNames[socket.id] = newNickName;
    io.emit('online users update', userNickNames)
  })

  socket.on('user is typing', function(){
    name = userNickNames[socket.id];
    if(name){
      if(!typingUsers.includes(name)){
        typingUsers.push(name)
        io.emit('user is typing', typingUsers)
      }
    }
  })

  socket.on('user stopped typing', function(){
    name = userNickNames[socket.id];
    if(typingUsers.includes(name)){
        index = typingUsers.indexOf(name);
        typingUsers.splice(index, 1);
        io.emit('user stopped typing', typingUsers)
      }
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

Object.prototype.getKeyByValue = function( value ) {
    for(var prop in this){
      if(this.hasOwnProperty(prop)){
          if(this[prop] === value)
            return prop;
        }
    }
    return false
}

const getMethods = (obj) => {
  let properties = new Set()
  let currentObj = obj
  do {
    Object.getOwnPropertyNames(currentObj).map(item => properties.add(item))
  } while ((currentObj = Object.getPrototypeOf(currentObj)))
  return [...properties.keys()].filter(item => typeof obj[item] === 'function')
}

function convertServerBoardToClientBoard(board)
{
  var clientBoard = new Array(boardWidth)
  for (var col = 0; col < boardWidth; col++)
  {
    clientBoard[col] = new Array(boardLength);
    for (var row = 0; row < boardLength; row++) 
    {
      var gameTile = board[col][row]
      var clientTile = {piece: getPieceForClientFromGamePiece(gameTile.piece), flatPiece: getPieceForClientFromGamePiece(gameTile.flatPiece), statuses: gameTile.statuses, row: row, col: col}
      clientBoard[col][row] = clientTile
    }
  }
  return clientBoard          
}

function getPieceForClientFromGamePiece(gamePiece)
{
  if (gamePiece == null)
    return
  var clientPiece = {}
  Object.assign(clientPiece, gamePiece)
  return clientPiece
}


function convertServerGameToClientGame(game)
{
  var clientGame = {}
  clientGame.host = game.host
  clientGame.phase = game.phase
  clientGame.redPlayer = _.cloneDeep(game.redPlayer)
  clientGame.bluePlayer = _.cloneDeep(game.bluePlayer)
  clientGame.redPlayer.inventory = (game.redPlayer.inventory).map(getPieceForClientFromGamePiece)
  clientGame.bluePlayer.inventory = (game.bluePlayer.inventory).map(getPieceForClientFromGamePiece)
  clientGame.isRedPlayersTurn = game.isRedPlayersTurn
  clientGame.board = convertServerBoardToClientBoard(game.board)
  clientGame.spells = convertDictionaryToList(game.spells).map(getPieceForClientFromGamePiece)
  clientGame.units = convertDictionaryToList(game.units).map(getPieceForClientFromGamePiece)
  clientGame.buildings = convertDictionaryToList(game.buildings).map(getPieceForClientFromGamePiece)
  return clientGame
}

function findIfItsAPlayersTurnInGame(isRedPlayer, game){
  return (game.isRedPlayersTurn && isRedPlayer) || (!game.isRedPlayersTurn && !isRedPlayer)
}

function findIfAPlayerOwnsAPiece(isRedPlayer, piece){
  return (piece.owner == 'Red' && isRedPlayer) || (piece.owner == 'Blue' && !isRedPlayer)
}

function getDistanceBetweenTwoTiles(tile1, tile2)
{
  return Math.abs(tile1.col - tile2.col) + Math.abs(tile1.row-tile2.row)
}

function findGameFromSocketID(socketID)
{
  for (host in gameList)
    if (gameList.hasOwnProperty(host) && (gameList[host].redPlayer.socketID == socketID || gameList[host].bluePlayer.socketID == socketID))
      return gameList[host]
  return null
}

function findIfPlayerIsRedPlayerInGameFromSocketID(game, socketID)
{
  if (game.redPlayer.socketID == socketID)
    return true
  else
    return false
}

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) 
{
  if (error.syscall !== 'listen') 
    throw error;

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function convertDictionaryToList(dict)
{
  var newList = []
  for (key in dict)
  {
    if (dict.hasOwnProperty(key))
        newList.push(dict[key])
  }
  return newList
}

function getKeyByValue(object, value) {
  return Object.keys(object).find(key => object[key] === value);
}

function onlyUnique(value, index, self) { 
    return self.indexOf(value) === index;
    //  return tilesWhichCanCurrentlyBeMovedTo.filter(onlyUnique
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function readCookie(name) {
    var nameEQ = encodeURIComponent(name) + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ')
            c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0)
            return decodeURIComponent(c.substring(nameEQ.length, c.length));
    }
    return null;
}
